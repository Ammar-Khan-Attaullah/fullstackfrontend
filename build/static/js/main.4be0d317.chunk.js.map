{"version":3,"sources":["Components/IMessageAll/Sidebar/Sidebar.js","App.js","Components/ComplexForm/Sidebar.js","serviceWorker.js","Contexts/Amazone/StateProvide.js","twitterfirebase.js","Components/Twitter/TweetBox/TweetBox.js","Components/Twitter/Post/Post.js","Components/Twitter/Feed/Feed.js","Components/Twitter/SidebarOption/SidebarOption.js","Components/Twitter/Sidebar/Sidebar.js","Components/Twitter/Widgets/Widgets.js","Apptwitter.js","index.js"],"names":["Sidebar","App","Component","Boolean","window","location","hostname","match","createContext","db","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","className","Avatar","src","value","onChange","e","target","placeholder","type","Button","onClick","preventDefault","collection","add","username","displayName","avatar","verified","text","image","Post","VerifiedUser","alt","ChatBubbleOutline","fontSize","Repeat","FavoriteBorder","Publish","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","SidebarOption","Icon","active","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","variant","fullWidth","Widgets","tweetId","sourceType","screenName","options","height","url","Apptwitter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4be0d317.chunk.js","sourcesContent":["import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarChat from \"../SidebarChat/SidebarChat\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h2>I am The Sidebar</h2>\r\n      <div className=\"sidebar__header\">\r\n        <Avatar className=\"sidebar__avatar\" />\r\n      </div>\r\n      <div className=\"sidebar__input\">\r\n        <SearchIcon />\r\n        <input placeholder=\"Search\" />\r\n      </div>\r\n      <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\r\n        <RateReviewOutlinedIcon />\r\n      </IconButton>\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat />\r\n        <SidebarChat />\r\n        <SidebarChat />\r\n        <SidebarChat />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Imessage from \"./Components/IMessageAll/IMessage/Imessage\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Imessage />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component, Fragment } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pathname: \"/\" };\r\n  }\r\n  checkActive = () => {};\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"sidenav\">sidebar</div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\n// Prepares the dataLayer\r\nexport const StateContext = createContext();\r\n\r\n// Wrap our app and provide the Data layer\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {\" \"}\r\n    {children}{\" \"}\r\n  </StateContext.Provider>\r\n);\r\n\r\n// Pull information from the data layer\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import * as firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDJM01JK-G5VmNq__WKym51LCgfYD20v_A\",\r\n    authDomain: \"twitter-clone-one-one.firebaseapp.com\",\r\n    databaseURL: \"https://twitter-clone-one-one.firebaseio.com\",\r\n    projectId: \"twitter-clone-one-one\",\r\n    storageBucket: \"twitter-clone-one-one.appspot.com\",\r\n    messagingSenderId: \"63948883961\",\r\n    appId: \"1:63948883961:web:e23a54ffd76bf9bde31f28\",\r\n    measurementId: \"G-EHRW56LMXG\",\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import { Avatar, Button } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport db from \"../../../twitterfirebase\";\r\nimport \"./TweetBox.css\";\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"posts\").add({\r\n      username: \"happystark\",\r\n      displayName: \"Atharva Deosthale\",\r\n      avatar:\r\n        \"https://scontent-bom1-1.xx.fbcdn.net/v/t1.0-1/c0.33.200.200a/p200x200/51099653_766820610355014_8315780769297465344_o.jpg?_nc_cat=101&_nc_sid=7206a8&_nc_ohc=c1qBHkwAgVsAX8KynKU&_nc_ht=scontent-bom1-1.xx&oh=340b05bea693dd1671296e0c2d004bb3&oe=5F84CA62\",\r\n      verified: true,\r\n      text: tweetMessage,\r\n      image: tweetImage,\r\n    });\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar src=\"https://scontent-bom1-1.xx.fbcdn.net/v/t1.0-1/c0.33.200.200a/p200x200/51099653_766820610355014_8315780769297465344_o.jpg?_nc_cat=101&_nc_sid=7206a8&_nc_ohc=c1qBHkwAgVsAX8KynKU&_nc_ht=scontent-bom1-1.xx&oh=340b05bea693dd1671296e0c2d004bb3&oe=5F84CA62\" />\r\n          <input\r\n            value={tweetMessage}\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          placeholder=\"Optional: Enter image URL\"\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          type=\"text\"\r\n          className=\"tweetBox__imageInput\"\r\n        />\r\n        <Button onClick={sendTweet} type=\"submit\" className=\"tweetBox__button\">\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport {\r\n  ChatBubbleOutline,\r\n  FavoriteBorder,\r\n  Publish,\r\n  Repeat,\r\n  VerifiedUser,\r\n} from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport \"./Post.css\";\r\nfunction Post({ displayName, username, verified, text, image, avatar }) {\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post__avatar\">\r\n        <Avatar src={avatar} />\r\n      </div>\r\n      <div className=\"post__body\">\r\n        <div className=\"post__header\">\r\n          <div className=\"post__headerText\">\r\n            <h3>\r\n              {displayName}{\" \"}\r\n              <span className=\"post__headerSpecial\">\r\n                {verified && <VerifiedUser className=\"post__badge\" />} @\r\n                {username}\r\n              </span>\r\n            </h3>\r\n          </div>\r\n          <div className=\"post__headerDescription\">\r\n            <p>{text}</p>\r\n          </div>\r\n        </div>\r\n        <img src={image} alt=\"\" />\r\n        <div className=\"post__footer\">\r\n          <ChatBubbleOutline fontSize=\"small\" />\r\n          <Repeat fontSize=\"small\" />\r\n          <FavoriteBorder fontSize=\"small\" />\r\n          <Publish fontSize=\"small\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import { Avatar, Button } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Feed.css\";\r\nimport db from \"../../../twitterfirebase\";\r\nimport TweetBox from \"../TweetBox/TweetBox\";\r\nimport Post from \"../Post/Post\";\r\nfunction Feed() {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"posts\").onSnapshot((snapshot) => {\r\n      setPosts(snapshot.docs.map((doc) => doc.data()));\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      <div className=\"feed__header\">\r\n        <h2>Home</h2>\r\n      </div>\r\n      <TweetBox />\r\n      {posts.map((post) => (\r\n        <Post\r\n          displayName={post.displayName}\r\n          username={post.username}\r\n          verified={post.verified}\r\n          text={post.text}\r\n          avatar={post.avatar}\r\n          image={post.image}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","import React from \"react\";\r\nimport \"./SidebarOption.css\";\r\n\r\nfunction SidebarOption({ text, Icon, active }) {\r\n  return (\r\n    <div className={`sidebarOption  ${active && \"sidebarOption--active\"}`}>\r\n      <Icon />\r\n      <h2>{text}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarOption;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarOption from \"../SidebarOption/SidebarOption\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <TwitterIcon className=\"sidebar__twitterIcon\" />\r\n      <SidebarOption Icon={HomeIcon} text=\"Home\" active={true} />\r\n      <SidebarOption Icon={SearchIcon} text=\"Explore\" />\r\n      <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\r\n      <SidebarOption Icon={MailOutlineIcon} text=\"Messages\" />\r\n      <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\" />\r\n      <SidebarOption Icon={ListAltIcon} text=\"Lists\" />\r\n      <SidebarOption Icon={PermIdentityIcon} text=\"Profile\" />\r\n      <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\r\n      <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth>\r\n        Tweet\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Search } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport {\r\n  TwitterTimelineEmbed,\r\n  TwitterShareButton,\r\n  TwitterTweetEmbed,\r\n} from \"react-twitter-embed\";\r\nimport \"./Widgets.css\";\r\n\r\nfunction Widgets() {\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__input\">\r\n        <Search className=\"widgets__searchIcon\" />\r\n        <input placeholder=\"Search Twitter\" type=\"text\" />\r\n      </div>\r\n\r\n      <div className=\"widgets__widgetContainer\">\r\n        <h2>What's happening</h2>\r\n        <TwitterTweetEmbed tweetId={\"1307046632517664771\"} />\r\n        <TwitterTimelineEmbed\r\n          sourceType=\"profile\"\r\n          screenName=\"atharvabrand\"\r\n          options={{ height: 400 }}\r\n        />\r\n        <TwitterShareButton\r\n          url={\"https://atharvadeosthale.com\"}\r\n          options={{ text: \"React Developer\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport Imessage from \"./Components/IMessageAll/IMessage/Imessage\";\nimport Feed from \"./Components/Twitter/Feed/Feed\";\nimport Sidebar from \"./Components/Twitter/Sidebar/Sidebar\";\nimport Widgets from \"./Components/Twitter/Widgets/Widgets\";\n\nfunction Apptwitter() {\n  return (\n    <div className=\"app\">\n      {/* Twitter */}\n      <Sidebar />\n      <Feed />\n      <Widgets />\n    </div>\n  );\n}\n\nexport default Apptwitter;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import AppAmazone from \"./AppAmazone\";\nimport Appforcomplexform from \"./Appforcomplexform.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./Contexts/Amazone/reducer\";\nimport { StateProvider } from \"./Contexts/Amazone/StateProvide\";\nimport Apptwitter from \"./Apptwitter\";\nimport Appimessagemern from \"./Appimessagemern\";\n\nReactDOM.render(<Apptwitter />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n\n// ReactDOM.render(<AppAmazone />, document.getElementById(\"root\"));\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <StateProvider initialState={initialState} reducer={reducer}>\n//       <AppAmazone />\n//     </StateProvider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n// import configureStore from \"./app/store\";\n// import { Provider } from \"react-redux\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <Provider configureStore={configureStore}> */}\n//     <App />\n//     {/* </Provider> */}\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}