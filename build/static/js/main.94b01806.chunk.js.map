{"version":3,"sources":["fullstack/assets/camera.png","Components/IMessageAll/Sidebar/Sidebar.js","App.js","Components/ComplexForm/Sidebar.js","serviceWorker.js","Contexts/Amazone/StateProvide.js","twitterfirebase.js","Components/Twitter/TweetBox/TweetBox.js","Components/Twitter/Post/Post.js","Apptwitter.js","fullstack-services/api.js","fullstack-user-context.js","Pages/fullstack/Login/index.js","Pages/fullstack/Register/index.js","Pages/fullstack/Dashboard/index.js","Pages/fullstack/EventsPage/index.js","Components/fullstack/TopNave/index.js","Pages/fullstack/MyRegistrations/index.js","routes.js","Appfullstack.js","index.js"],"names":["module","exports","Sidebar","App","Component","Boolean","window","location","hostname","match","createContext","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","GoogleAuthProvider","TweetBox","forwardRef","ref","displayName","username","verified","text","image","avatar","className","Avatar","src","VerifiedUser","alt","ChatBubbleOutline","fontSize","Repeat","FavoriteBorder","Publish","Apptwitter","api","axios","create","baseURL","UserContext","ContextWrapper","props","useState","localStorage","getItem","user","isLoggedIn","setIsloggedIn","Provider","value","children","Login","history","useContext","email","setEmail","password","setPassword","error","setError","errorMessage","setErrorMessage","handleSubmit","evt","a","preventDefault","post","response","user_id","data","setItem","push","message","setTimeout","Container","Form","onSubmit","FormGroup","Input","type","name","id","placeholder","onChange","target","onClick","Alert","color","Register","firstName","setFirstName","lastName","setLastName","Dashboard","events","setEvents","rSelected","setRSelected","success","setSuccess","messageHandler","setMessageHandler","eventsRequest","setEventsRequest","dropdownOpen","setDropDownOpen","eventRequestMessage","setEventRequestMessage","eventRequestSuccess","setEventRequestSuccess","useEffect","getEvents","socket","useMemo","socketio","query","on","filterHandler","myEventsHandler","get","headers","filter","url","deleteEventHandler","eventId","delete","registrationRequestHandler","event","title","acceptEventHandler","removeNotificationFromDashboard","console","log","rejectEventHandler","newEvents","_id","map","request","key","ButtonGroup","Dropdown","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","active","style","backgroundImage","thumbnail_url","size","moment","date","format","parseFloat","price","toFixed","description","EventsPage","setTitle","setDescription","setPrice","thumbnail","setThumbnail","sport","setSport","setDate","setOpen","preview","URL","createObjectURL","submitHandler","eventData","FormData","append","Promise","reject","sportEventHandler","Label","files","cameraIcon","maxWidth","ButtonDropdown","disabled","TopNav","collapsed","setCollapsed","Navbar","light","NavbarToggler","to","removeItem","Collapse","navbar","Nav","NavItem","MyRegistrations","myEvents","setMyEvents","getMyEvents","isApproved","approved","eventTitle","eventDate","eventPrice","userEmail","undefined","Routes","path","exact","component","Appfullstack","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.94b01806.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/camera.91a960a0.png\";","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarChat from \"../SidebarChat/SidebarChat\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h2>I am The Sidebar</h2>\r\n      <div className=\"sidebar__header\">\r\n        <Avatar className=\"sidebar__avatar\" />\r\n      </div>\r\n      <div className=\"sidebar__input\">\r\n        <SearchIcon />\r\n        <input placeholder=\"Search\" />\r\n      </div>\r\n      <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\r\n        <RateReviewOutlinedIcon />\r\n      </IconButton>\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat />\r\n        <SidebarChat />\r\n        <SidebarChat />\r\n        <SidebarChat />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Imessage from \"./Components/IMessageAll/IMessage/Imessage\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Imessage />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component, Fragment } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pathname: \"/\" };\r\n  }\r\n  checkActive = () => {};\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"sidenav\">sidebar</div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\n// Prepares the dataLayer\r\nexport const StateContext = createContext();\r\n\r\n// Wrap our app and provide the Data layer\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {\" \"}\r\n    {children}{\" \"}\r\n  </StateContext.Provider>\r\n);\r\n\r\n// Pull information from the data layer\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import * as firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDJM01JK-G5VmNq__WKym51LCgfYD20v_A\",\r\n    authDomain: \"twitter-clone-one-one.firebaseapp.com\",\r\n    databaseURL: \"https://twitter-clone-one-one.firebaseio.com\",\r\n    projectId: \"twitter-clone-one-one\",\r\n    storageBucket: \"twitter-clone-one-one.appspot.com\",\r\n    messagingSenderId: \"63948883961\",\r\n    appId: \"1:63948883961:web:e23a54ffd76bf9bde31f28\",\r\n    measurementId: \"G-EHRW56LMXG\",\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport { db, auth, provider };\r\n// export default db;","import { Avatar, Button } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { db } from \"../../../twitterfirebase\";\r\nimport \"./TweetBox.css\";\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"posts\").add({\r\n      username: \"happystark\",\r\n      displayName: \"Atharva Deosthale\",\r\n      avatar:\r\n        \"https://scontent-bom1-1.xx.fbcdn.net/v/t1.0-1/c0.33.200.200a/p200x200/51099653_766820610355014_8315780769297465344_o.jpg?_nc_cat=101&_nc_sid=7206a8&_nc_ohc=c1qBHkwAgVsAX8KynKU&_nc_ht=scontent-bom1-1.xx&oh=340b05bea693dd1671296e0c2d004bb3&oe=5F84CA62\",\r\n      verified: true,\r\n      text: tweetMessage,\r\n      image: tweetImage,\r\n    });\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar src=\"https://scontent-bom1-1.xx.fbcdn.net/v/t1.0-1/c0.33.200.200a/p200x200/51099653_766820610355014_8315780769297465344_o.jpg?_nc_cat=101&_nc_sid=7206a8&_nc_ohc=c1qBHkwAgVsAX8KynKU&_nc_ht=scontent-bom1-1.xx&oh=340b05bea693dd1671296e0c2d004bb3&oe=5F84CA62\" />\r\n          <input\r\n            value={tweetMessage}\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          placeholder=\"Optional: Enter image URL\"\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          type=\"text\"\r\n          className=\"tweetBox__imageInput\"\r\n        />\r\n        <Button onClick={sendTweet} type=\"submit\" className=\"tweetBox__button\">\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport {\r\n  ChatBubbleOutline,\r\n  FavoriteBorder,\r\n  Publish,\r\n  Repeat,\r\n  VerifiedUser,\r\n} from \"@material-ui/icons\";\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport React, { forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nconst Post = forwardRef(\r\n  ({ displayName, username, verified, text, image, avatar }, ref) => {\r\n    return (\r\n      <div className=\"post\" ref={ref}>\r\n        <div className=\"post__avatar\">\r\n          <Avatar src={avatar} />\r\n        </div>\r\n        <div className=\"post__body\">\r\n          <div className=\"post__header\">\r\n            <div className=\"post__headerText\">\r\n              <h3>\r\n                {displayName}{\" \"}\r\n                <span className=\"post__headerSpecial\">\r\n                  {verified && <VerifiedUser className=\"post__badge\" />} @\r\n                  {username}\r\n                </span>\r\n              </h3>\r\n            </div>\r\n            <div className=\"post__headerDescription\">\r\n              <p>{text}</p>\r\n            </div>\r\n          </div>\r\n          <img src={image} alt=\"\" />\r\n          <div className=\"post__footer\">\r\n            <ChatBubbleOutline fontSize=\"small\" />\r\n            <Repeat fontSize=\"small\" />\r\n            <FavoriteBorder fontSize=\"small\" />\r\n            <Publish fontSize=\"small\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"./Apptwitter.css\";\n\nimport Imessage from \"./Components/IMessageAll/IMessage/Imessage\";\nimport Feed from \"./Components/Twitter/Feed/Feed\";\nimport Sidebar from \"./Components/Twitter/Sidebar/Sidebar\";\nimport Widgets from \"./Components/Twitter/Widgets/Widgets\";\n\nfunction Apptwitter() {\n  return (\n    <div className=\"app\">\n      {/* Twitter */}\n      <Sidebar />\n      <Feed />\n      <Widgets />\n    </div>\n  );\n}\n\nexport default Apptwitter;\n","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://fullstackbackend-api.herokuapp.com/\",\n    // baseURL:'http://localhost:8000'\n});\n\nexport default api;","import React, { useState, createContext } from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const ContextWrapper = (props) => {\r\n  const defaultValueHandler = () => {\r\n    const user = localStorage.getItem(\"user\");\r\n    if (user) return true;\r\n    return false;\r\n  };\r\n\r\n  const [isLoggedIn, setIsloggedIn] = useState(defaultValueHandler());\r\n  const user = {\r\n    isLoggedIn,\r\n    setIsloggedIn,\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={user}> {props.children} </UserContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\nimport api from \"../../../fullstack-services/api\";\nimport { Alert, Container, Button, Form, FormGroup, Input } from \"reactstrap\";\nimport { UserContext } from \"../../../fullstack-user-context\";\nexport default function Login({ history }) {\n  const { setIsloggedIn } = useContext(UserContext);\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"false\");\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    const response = await api.post(\"/login\", { email, password });\n    const user_id = response.data.user_id || false;\n    const user = response.data.user || false;\n\n    try {\n      if (user && user_id) {\n        localStorage.setItem(\"user\", user);\n        localStorage.setItem(\"user_id\", user_id);\n        setIsloggedIn(true);\n        history.push(\"/\");\n      } else {\n        const { message } = response.data;\n        setError(true);\n        setErrorMessage(message);\n        setTimeout(() => {\n          setError(false);\n          setErrorMessage(\"\");\n        }, 2000);\n      }\n    } catch (error) {\n      setError(true);\n      setErrorMessage(\"Error, the server returned an error\");\n    }\n  };\n\n  return (\n    <Container>\n      <h2>Login:</h2>\n      <p>\n        Please <strong>Login</strong> into your account\n      </p>\n      <Form onSubmit={handleSubmit}>\n        <div className=\"input-group\">\n          <FormGroup className=\"form-group-\"></FormGroup>\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n            <Input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"Your email\"\n              onChange={(evt) => setEmail(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n            <Input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              placeholder=\"Your password\"\n              onChange={(evt) => setPassword(evt.target.value)}\n            />\n          </FormGroup>\n        </div>\n        <FormGroup>\n          <Button className=\"submit-btn\">Submit</Button>\n        </FormGroup>\n        <FormGroup>\n          <Button\n            className=\"secondary-btn\"\n            onClick={() => history.push(\"/register\")}\n          >\n            New Account\n          </Button>\n        </FormGroup>\n      </Form>\n      {error ? (\n        <Alert className=\"event-validation\" color=\"danger\">\n          {\" \"}\n          {errorMessage}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n    </Container>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport api from \"../../../fullstack-services/api\";\nimport { Button, Form, FormGroup, Container, Input, Alert } from \"reactstrap\";\nimport { UserContext } from \"../../../fullstack-user-context\";\n\nexport default function Register({ history }) {\n  const { setIsloggedIn } = useContext(UserContext);\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    if (\n      email !== \"\" &&\n      password !== \"\" &&\n      firstName !== \"\" &&\n      lastName !== \"\"\n    ) {\n      const response = await api.post(\"/user/register\", {\n        email,\n        password,\n        firstName,\n        lastName,\n      });\n      const user = response.data.user || false;\n      const user_id = response.data.user_id || false;\n\n      if (user && user_id) {\n        localStorage.setItem(\"user\", user);\n        localStorage.setItem(\"user_id\", user_id);\n        setIsloggedIn(true);\n\n        history.push(\"/dashboard\");\n      } else {\n        const { message } = response.data;\n        setError(true);\n        setErrorMessage(message);\n        setTimeout(() => {\n          setError(false);\n          setErrorMessage(\"\");\n        }, 2000);\n      }\n    } else {\n      setError(true);\n      setErrorMessage(\"You need to fill all the Inputs\");\n      setTimeout(() => {\n        setError(false);\n        setErrorMessage(\"\");\n      }, 2000);\n    }\n  };\n\n  return (\n    <Container>\n      <h2>Register:</h2>\n      <p>\n        Please <strong>Register</strong> for a new account\n      </p>\n      <Form onSubmit={handleSubmit}>\n        <div className=\"input-group\">\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n            <Input\n              type=\"text\"\n              name=\"firstName\"\n              id=\"firstName\"\n              placeholder=\"Your first name\"\n              onChange={(evt) => setFirstName(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n            <Input\n              type=\"text\"\n              name=\"lastName\"\n              id=\"lastName\"\n              placeholder=\"Your last name\"\n              onChange={(evt) => setLastName(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n            <Input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"Your email\"\n              onChange={(evt) => setEmail(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n            <Input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              placeholder=\"Your password\"\n              onChange={(evt) => setPassword(evt.target.value)}\n            />\n          </FormGroup>\n        </div>\n        <FormGroup>\n          <Button className=\"submit-btn\">Submit</Button>\n        </FormGroup>\n        <FormGroup>\n          <Button\n            className=\"secondary-btn\"\n            onClick={() => history.push(\"/login\")}\n          >\n            Login instead?\n          </Button>\n        </FormGroup>\n      </Form>\n      {error ? (\n        <Alert className=\"event-validation\" color=\"danger\">\n          {errorMessage}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n    </Container>\n  );\n}\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport api from \"../../../fullstack-services/api\";\nimport moment from \"moment\";\nimport {\n  Button,\n  ButtonGroup,\n  Alert,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n} from \"reactstrap\";\nimport socketio from \"socket.io-client\";\nimport \"./dashboard.css\";\n//Dashboard will show all the events\nexport default function Dashboard({ history }) {\n  const [events, setEvents] = useState([]);\n  const user = localStorage.getItem(\"user\");\n  const user_id = localStorage.getItem(\"user_id\");\n\n  const [rSelected, setRSelected] = useState(null);\n  const [error, setError] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [messageHandler, setMessageHandler] = useState(\"\");\n  const [eventsRequest, setEventsRequest] = useState([]);\n  const [dropdownOpen, setDropDownOpen] = useState(false);\n  const [eventRequestMessage, setEventRequestMessage] = useState(\"\");\n  const [eventRequestSuccess, setEventRequestSuccess] = useState(false);\n\n  const toggle = () => setDropDownOpen(!dropdownOpen);\n  useEffect(() => {\n    getEvents();\n  }, []);\n\n  const socket = useMemo(\n    () => socketio(\"http://localhost:8000/\", { query: { user: user_id } }),\n    [user_id]\n  );\n\n  useEffect(() => {\n    socket.on(\"registration_request\", (data) =>\n      setEventsRequest([...eventsRequest, data])\n    );\n  }, [eventsRequest, socket]);\n\n  const filterHandler = (query) => {\n    setRSelected(query);\n    getEvents(query);\n  };\n\n  const myEventsHandler = async () => {\n    try {\n      setRSelected(\"myevents\");\n      const response = await api.get(\"/user/events\", { headers: { user } });\n      setEvents(response.data.events);\n    } catch (error) {\n      history.push(\"/login\");\n    }\n  };\n\n  const getEvents = async (filter) => {\n    try {\n      const url = filter ? `/dashboard/${filter}` : \"/dashboard\";\n      const response = await api.get(url, { headers: { user } });\n\n      setEvents(response.data.events);\n    } catch (error) {\n      history.push(\"/login\");\n    }\n  };\n\n  const deleteEventHandler = async (eventId) => {\n    try {\n      await api.delete(`/event/${eventId}`, { headers: { user: user } });\n      setSuccess(true);\n      setMessageHandler(\"The event was deleted successfully!\");\n      setTimeout(() => {\n        setSuccess(false);\n        filterHandler(null);\n        setMessageHandler(\"\");\n      }, 2500);\n    } catch (error) {\n      setError(true);\n      setMessageHandler(\"Error when deleting event!\");\n      setTimeout(() => {\n        setError(false);\n        setMessageHandler(\"\");\n      }, 2000);\n    }\n  };\n\n  const registrationRequestHandler = async (event) => {\n    try {\n      await api.post(`/registration/${event.id}`, {}, { headers: { user } });\n\n      setSuccess(true);\n      setMessageHandler(\n        `The request for the event ${event.title} was successfully!`\n      );\n      setTimeout(() => {\n        setSuccess(false);\n        filterHandler(null);\n        setMessageHandler(\"\");\n      }, 2500);\n    } catch (error) {\n      setError(true);\n      setMessageHandler(\n        `The request for the event ${event.title} wasn't successfully!`\n      );\n      setTimeout(() => {\n        setError(false);\n        setMessageHandler(\"\");\n      }, 2000);\n    }\n  };\n\n  const acceptEventHandler = async (eventId) => {\n    try {\n      await api.post(\n        `/registration/${eventId}/approvals`,\n        {},\n        { headers: { user } }\n      );\n      setEventRequestSuccess(true);\n      setEventRequestMessage(\"Event approved successfully!\");\n      removeNotificationFromDashboard(eventId);\n      setTimeout(() => {\n        setEventRequestSuccess(false);\n        setEventRequestMessage(\"\");\n      }, 2000);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const rejectEventHandler = async (eventId) => {\n    try {\n      await api.post(\n        `/registration/${eventId}/rejections`,\n        {},\n        { headers: { user } }\n      );\n      setEventRequestSuccess(true);\n      setEventRequestMessage(\"Event rejected successfully!\");\n      removeNotificationFromDashboard(eventId);\n      setTimeout(() => {\n        setEventRequestSuccess(false);\n        setEventRequestMessage(\"\");\n      }, 2000);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const removeNotificationFromDashboard = (eventId) => {\n    const newEvents = eventsRequest.filter((event) => event._id !== eventId);\n    setEventsRequest(newEvents);\n  };\n\n  return (\n    <>\n      <ul className=\"notifications\">\n        {eventsRequest.map((request) => {\n          console.log(request);\n          return (\n            <li key={request.id}>\n              <div>\n                <strong>{request.user.email} </strong> is requesting to register\n                to your Event <strong>{request.event.title}</strong>\n              </div>\n              <ButtonGroup>\n                <Button\n                  color=\"secondary\"\n                  onClick={() => acceptEventHandler(request._id)}\n                >\n                  Accept\n                </Button>\n                <Button\n                  color=\"danger\"\n                  onClick={() => rejectEventHandler(request._id)}\n                >\n                  Reject\n                </Button>\n              </ButtonGroup>\n              {/* <ButtonGroup>\n                <Button color=\"secondary\" onClick={() => {}}>\n                  Accept\n                </Button>\n                <Button color=\"danger\" onClick={() => {}}>\n                  Cancel\n                </Button>\n              </ButtonGroup> */}\n            </li>\n          );\n        })}\n      </ul>\n      {eventRequestSuccess ? (\n        <Alert color=\"success\"> {eventRequestMessage}</Alert>\n      ) : (\n        \"\"\n      )}\n      <div className=\"filter-panel\">\n        <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n          <DropdownToggle color=\"primary\" caret>\n            Filter\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem\n              onClick={() => filterHandler(null)}\n              active={rSelected === null}\n            >\n              All Sports\n            </DropdownItem>\n            <DropdownItem\n              onClick={myEventsHandler}\n              active={rSelected === \"myevents\"}\n            >\n              My Events\n            </DropdownItem>\n            <DropdownItem\n              onClick={() => filterHandler(\"running\")}\n              active={rSelected === \"running\"}\n            >\n              Running\n            </DropdownItem>\n            <DropdownItem\n              onClick={() => filterHandler(\"cycling\")}\n              active={rSelected === \"cycling\"}\n            >\n              Cycling\n            </DropdownItem>\n            <DropdownItem\n              color=\"primary\"\n              onClick={() => filterHandler(\"swimming\")}\n              active={rSelected === \"swimming\"}\n            >\n              Swimming\n            </DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n      </div>\n      {/* <div className=\"filter-panel\">\n        <ButtonGroup>\n          <Button\n            color=\"primary\"\n            onClick={() => filterHandler(null)}\n            active={rSelected === null}\n          >\n            All Sports\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={myEventsHandler}\n            active={rSelected === \"myevents\"}\n          >\n            My Events\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={() => filterHandler(\"running\")}\n            active={rSelected === \"running\"}\n          >\n            Running\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={() => filterHandler(\"cycling\")}\n            active={rSelected === \"cycling\"}\n          >\n            Cycling\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={() => filterHandler(\"swimming\")}\n            active={rSelected === \"swimming\"}\n          >\n            Swimming\n          </Button>\n        </ButtonGroup>\n      </div> */}\n      <ul className=\"events-list\">\n        {events.map((event) => (\n          <li key={event._id}>\n            <header\n              style={{ backgroundImage: `url(\"${event.thumbnail_url}\")` }}\n            >\n              {event.user === user_id ? (\n                <div>\n                  <Button\n                    color=\"danger\"\n                    size=\"sm\"\n                    onClick={() => deleteEventHandler(event._id)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              ) : (\n                \"\"\n              )}\n            </header>\n            <strong>{event.title}</strong>\n            <span>Event Date: {moment(event.date).format(\"l\")}</span>\n            <span>Event Price: {parseFloat(event.price).toFixed(2)}</span>\n            <span>Event Description: {event.description}</span>\n            <Button\n              color=\"primary\"\n              onClick={() => registrationRequestHandler(event)}\n            >\n              Registration Request\n            </Button>\n          </li>\n        ))}\n      </ul>\n      {error ? (\n        <Alert className=\"event-validation\" color=\"danger\">\n          {\" \"}\n          {messageHandler}{\" \"}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      {success ? (\n        <Alert className=\"event-validation\" color=\"success\">\n          {\" \"}\n          {messageHandler}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport api from \"../../../fullstack-services/api\";\nimport cameraIcon from \"../../../fullstack/assets/camera.png\";\nimport {\n  Alert,\n  Container,\n  Button,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  ButtonDropdown,\n} from \"reactstrap\";\nimport \"./events.css\";\n\nexport default function EventsPage({ history }) {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [thumbnail, setThumbnail] = useState(null);\n  const [sport, setSport] = useState(\"Sport\");\n  const [date, setDate] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [dropdownOpen, setOpen] = useState(false);\n  const user = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    if (!user) history.push(\"/login\");\n  }, []);\n\n  const toggle = () => setOpen(!dropdownOpen);\n\n  const preview = useMemo(() => {\n    return thumbnail ? URL.createObjectURL(thumbnail) : null;\n  }, [thumbnail]);\n\n  const submitHandler = async (evt) => {\n    evt.preventDefault();\n\n    const eventData = new FormData();\n\n    eventData.append(\"thumbnail\", thumbnail);\n    eventData.append(\"sport\", sport);\n    eventData.append(\"title\", title);\n    eventData.append(\"price\", price);\n    eventData.append(\"description\", description);\n    eventData.append(\"date\", date);\n\n    try {\n      if (\n        title !== \"\" &&\n        description !== \"\" &&\n        price !== \"\" &&\n        sport !== \"Sport\" &&\n        date !== \"\" &&\n        thumbnail !== null\n      ) {\n        await api.post(\"/event\", eventData, { headers: { user } });\n        setSuccess(true);\n        setTimeout(() => {\n          setSuccess(false);\n          history.push(\"/\");\n        }, 2000);\n      } else {\n        setError(true);\n        setTimeout(() => {\n          setError(false);\n        }, 2000);\n      }\n    } catch (error) {\n      Promise.reject(error);\n      console.log(error);\n    }\n  };\n\n  const sportEventHandler = (sport) => setSport(sport);\n\n  return (\n    <Container>\n      <h2>Create your Event</h2>\n      <Form onSubmit={submitHandler}>\n        <div className=\"input-group\">\n          <FormGroup>\n            <Label>Upload Image: </Label>\n            <Label\n              id=\"thumbnail\"\n              style={{ backgroundImage: `url(${preview})` }}\n              className={thumbnail ? \"has-thumbnail\" : \"\"}\n            >\n              <Input\n                type=\"file\"\n                onChange={(evt) => setThumbnail(evt.target.files[0])}\n              />\n              <img\n                src={cameraIcon}\n                style={{ maxWidth: \"50px\" }}\n                alt=\"upload icon image\"\n              />\n            </Label>\n          </FormGroup>\n          <FormGroup>\n            <Label>Title: </Label>\n            <Input\n              id=\"title\"\n              type=\"text\"\n              value={title}\n              placeholder={\"Event Title\"}\n              onChange={(evt) => setTitle(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Event description: </Label>\n            <Input\n              id=\"description\"\n              type=\"text\"\n              value={description}\n              placeholder={\"Event Description\"}\n              onChange={(evt) => setDescription(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Event price: </Label>\n            <Input\n              id=\"price\"\n              type=\"text\"\n              value={price}\n              placeholder={\"Event Price £0.00\"}\n              onChange={(evt) => setPrice(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Event date: </Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              value={date}\n              onChange={(evt) => setDate(evt.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\n              <Button id=\"caret\" value={sport} disabled>\n                {sport}\n              </Button>\n              <DropdownToggle caret />\n              <DropdownMenu>\n                <DropdownItem onClick={() => sportEventHandler(\"running\")}>\n                  running\n                </DropdownItem>\n                <DropdownItem onClick={() => sportEventHandler(\"cycling\")}>\n                  cycling\n                </DropdownItem>\n                <DropdownItem onClick={() => sportEventHandler(\"swimming\")}>\n                  swimming\n                </DropdownItem>\n              </DropdownMenu>\n            </ButtonDropdown>\n          </FormGroup>\n        </div>\n        <FormGroup>\n          <Button className=\"submit-btn\">Submit</Button>\n        </FormGroup>\n        <FormGroup>\n          <Button className=\"secondary-btn\" onClick={() => history.push(\"/\")}>\n            Cancel\n          </Button>\n        </FormGroup>\n      </Form>\n      {error ? (\n        <Alert className=\"event-validation\" color=\"danger\">\n          {\" \"}\n          Missing required information\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      {success ? (\n        <Alert className=\"event-validation\" color=\"success\">\n          {\" \"}\n          The event was created successfully!\n        </Alert>\n      ) : (\n        \"\"\n      )}\n    </Container>\n  );\n}\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserContext } from \"../../../fullstack-user-context\";\r\nconst TopNav = (props) => {\r\n  const { isLoggedIn, setIsloggedIn } = useContext(UserContext);\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"user_id\");\r\n    setIsloggedIn(false);\r\n  };\r\n\r\n  return isLoggedIn ? (\r\n    <div>\r\n      <Navbar color=\"faded\" light>\r\n        <NavbarToggler onClick={toggleNavbar} />\r\n        <Link to=\"/login\" onClick={logoutHandler}>\r\n          Logout\r\n        </Link>\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <Link to=\"/events\">Events</Link>\r\n            </NavItem>{\" \"}\r\n            <NavItem>\r\n              <Link to=\"/dashboard\">Dashboard</Link>\r\n            </NavItem>{\" \"}\r\n            <NavItem>\r\n              <Link to=\"/myregisterations\">My Registerations</Link>\r\n            </NavItem>{\" \"}\r\n          </Nav>{\" \"}\r\n        </Collapse>{\" \"}\r\n      </Navbar>{\" \"}\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default TopNav;\r\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport api from \"../../../fullstack-services/api\";\nimport { Button, ButtonGroup } from \"reactstrap\";\nimport \"./style.css\";\n\nexport default function MyRegistrations() {\n  const [myEvents, setMyEvents] = useState([]);\n  const user = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    getMyEvents();\n  }, []);\n\n  const getMyEvents = async () => {\n    try {\n      const response = await api.get(\"/registration\", { headers: { user } });\n      console.log(response.data);\n      setMyEvents(response.data);\n    } catch (error) {}\n  };\n\n  const isApproved = (approved) =>\n    approved === true ? \"Approved\" : \"Rejected\";\n\n  const acceptEventHandler = async (eventId) => {\n    try {\n      await api.post(\n        `/registration/${eventId}/approvals`,\n        {},\n        { headers: { user } }\n      );\n      getMyEvents();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const rejectEventHandler = async (eventId) => {\n    try {\n      await api.post(\n        `/registration/${eventId}/rejections`,\n        {},\n        { headers: { user } }\n      );\n      getMyEvents();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <ul className=\"events\">\n      {myEvents.map((event) => (\n        <li key={event._id}>\n          <div>\n            <strong>{event.eventTitle}</strong>\n          </div>\n          <div className=\"events-details\">\n            <span>Event Date: {moment(event.eventDate).format(\"l\")}</span>\n            <span>Event Price: £{parseFloat(event.eventPrice).toFixed(2)}</span>\n            <span>User Email: {event.userEmail}</span>\n            <span>\n              Status:\n              <span\n                className={\n                  event.approved !== undefined\n                    ? isApproved(event.approved)\n                    : \"Pending\"\n                }\n              >\n                {event.approved !== undefined\n                  ? isApproved(event.approved)\n                  : \"Pending\"}\n              </span>\n            </span>\n          </div>\n          <ButtonGroup>\n            <Button\n              disabled={\n                event.approved === true || event.approved === false\n                  ? true\n                  : false\n              }\n              color=\"secondary\"\n              onClick={() => acceptEventHandler(event._id)}\n            >\n              Accept\n            </Button>\n            <Button\n              disabled={\n                event.approved === true || event.approved === false\n                  ? true\n                  : false\n              }\n              color=\"danger\"\n              onClick={() => rejectEventHandler(event._id)}\n            >\n              Reject\n            </Button>\n          </ButtonGroup>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Pages/fullstack/Login\";\nimport Register from \"./Pages/fullstack/Register\";\nimport Dashboard from \"./Pages/fullstack/Dashboard\";\nimport EventsPage from \"./Pages/fullstack/EventsPage\";\nimport TopNav from \"./Components/fullstack/TopNave\";\nimport MyRegistrations from \"./Pages/fullstack/MyRegistrations/index\";\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <TopNav />\n      <Switch>\n        <Route path=\"/login\" exact component={Login} />{\" \"}\n        <Route path=\"/myregisterations\" exact component={MyRegistrations} />\n        <Route path=\"/register\" exact component={Register} />{\" \"}\n        <Route path=\"/events\" component={EventsPage} />{\" \"}\n        <Route path=\"/\" component={Dashboard} />{\" \"}\n      </Switch>{\" \"}\n    </BrowserRouter>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./Appfullstack.css\";\nimport { Container } from \"reactstrap\";\nimport Imessage from \"./Components/IMessageAll/IMessage/Imessage\";\nimport Feed from \"./Components/Twitter/Feed/Feed\";\nimport Sidebar from \"./Components/Twitter/Sidebar/Sidebar\";\nimport Widgets from \"./Components/Twitter/Widgets/Widgets\";\nimport Routes from \"./routes\";\nimport { ContextWrapper } from \"./fullstack-user-context\";\nfunction Appfullstack() {\n  return (\n    <ContextWrapper>\n      <Container>\n        <h1>Sport's App</h1>\n\n        <div className=\"content\">\n          <Routes />\n        </div>\n      </Container>\n    </ContextWrapper>\n  );\n}\n\nexport default Appfullstack;\n// mongodb+srv://<username>:<password>@cluster0.t88fd.mongodb.net/<dbname>?retryWrites=true&w=majority\n// NasNSMMdLzP4dJvY;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import AppAmazone from \"./AppAmazone\";\nimport Appforcomplexform from \"./Appforcomplexform.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./Contexts/Amazone/reducer\";\nimport { StateProvider } from \"./Contexts/Amazone/StateProvide\";\nimport Apptwitter from \"./Apptwitter\";\nimport Appfullstack from \"./Appfullstack\";\nimport Appimessagemern from \"./Appimessagemern\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<Appfullstack />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n\n// ReactDOM.render(<AppAmazone />, document.getElementById(\"root\"));\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <StateProvider initialState={initialState} reducer={reducer}>\n//       <AppAmazone />\n//     </StateProvider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n// import configureStore from \"./app/store\";\n// import { Provider } from \"react-redux\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <Provider configureStore={configureStore}> */}\n//     <App />\n//     {/* </Provider> */}\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}